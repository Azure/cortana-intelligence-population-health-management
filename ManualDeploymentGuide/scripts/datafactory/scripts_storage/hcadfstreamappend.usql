// 
// Copyright  Microsoft Corporation ("Microsoft").
// 
// Microsoft grants you the right to use this software in accordance with your subscription agreement, if any, to use software 
// provided for use with Microsoft Azure ("Subscription Agreement").  All software is licensed, not sold.  
// 
// If you do not have a Subscription Agreement, or at your option if you so choose, Microsoft grants you a nonexclusive, perpetual, 
// royalty-free right to use and modify this software solely for your internal business purposes in connection with Microsoft Azure 
// and other Microsoft products, including but not limited to, Microsoft R Open, Microsoft R Server, and Microsoft SQL Server.  
// 
// Unless otherwise stated in your Subscription Agreement, the following applies.  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT 
// WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL MICROSOFT OR ITS LICENSORS BE LIABLE 
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE SAMPLE CODE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
// 

/* Summary:
 Data for PBI visualization consists of all streamed scored data (received after timestamp defined by @dataAquisitionStart), padded 
with historic data up to @dataSizeForVisualization rows. If all streamed scored data has more than @dataSizeForVisualization rows,
we only keep the most recent @dataSizeForVisualization streamed scored rows and append 0 historical rows.

 Inputs:
  - @inputFile: all streamed scored data received after @dataAquisitionStart
  - @HistoricalDataFile: historic data (1103173 rows)
  
 Output:
   - @outputFile: most recent up to @dataSizeForVisualization rows from scored streamed data, concatenated with historic data if needed.

*/

REFERENCE ASSEMBLY [ExtR];

// define base directories for deployed dependencies
DECLARE @HistoricalDataDir string = "/PHM/data/historical";
DECLARE @InputStreamedDataDir string = "/stream/forPBI";
DECLARE @OutputDir string =  @"/stream/forPBI";

// number of rows used for PBI visualization
DECLARE @dataSizeForVisualization int = 1000000;

// @dataAquisitionStart controls the begining time for all streamed scored data processed in this script
// Can be defined either using the stremed data recorded time stamps ( "2015-03-20T21:25:00.0000000"), or as below. 
DECLARE @dataAquisitionStart string = "01/29/2010 21:25:00";

// define both input datasets, all streamed scored (received after @dataAquisitionStart) plus historic data
DECLARE @inputFile string = @InputStreamedDataDir + @"/" + @"{scoredStreamedSubsettingDate:yyyy}/{scoredStreamedSubsettingDate:MM}/{scoredStreamedSubsettingDate:dd}/{scoredStreamedSubsettingDate:HH}/{scoredStreamedSubsettingDate:mm}_forPBI.csv";
DECLARE @HistoricalDataFile string =  @HistoricalDataDir + @"/" + @"data4visualization_hist.csv";

// declare output data
DECLARE @outputFile string =  @OutputDir + @"/" + @"data4visualization_latest.csv";

// define all streamed scored data
@InputDataAll = 
    EXTRACT 
	dateAndTime DateTime,
	dshospid string,
	id string,
	age string,
	amonth string,
	atype string,
	dispub04 string,
	drg string,
	dx1 string,
	dxccs1 string,
	hospst string,
	homeless string,
	los string,
	mdc string,
	medincstq string,
	pr1 string,
	prccs1 string,
	pstate string,
	pointoforiginub04 string,
	race string,
	totchg string,
	visitlink string,
	zip string,
	ayear string,
	dxmccs1 string,
	prmccs1 string,
	readmitted string,
	dxccs_name string,
	prccs_name string,
	prmccs_name string,
	dxmccs_name string,
	transfer_in string,
	mdc_name string,
	totchg_bin string,
	los_bin string,
	chgperday string,
	age_bin string,
	age_bin2 string,
	payer1 string,
	gender string,
	hospzip string,
	readmitted_num string,
	myrownum string,
	ecol1 string,
	ecol2 string,
	ecol3 string,
	ecol4 string,
	ecol5 string,
	ecol6 string,
	ecol7 string,
	chronic_conditions string,
	ecol8 string,
	ecol9 string,
	ecol10 string,
	readmittance_conditions string,
	scoredStreamedSubsettingDate DateTime 
    FROM @inputFile
    USING Extractors.Csv();  

// load all streamed scored data received since @dataAquisitionStart        
 @InputData = 
    SELECT   *
    FROM @InputDataAll
    WHERE scoredStreamedSubsettingDate >= DateTime.Parse(@dataAquisitionStart);    

// load historical data to pad streamed scored up to @dataSizeForVisualization            
@HistoricalData =
     EXTRACT 
	dshospid string,
	id string,
	age string,
	amonth string,
	atype string,
	dispub04 string,
	drg string,
	dx1 string,
	dxccs1 string,
	hospst string,
	homeless string,
	los string,
	mdc string,
	medincstq string,
	pr1 string,
	prccs1 string,
	pstate string,
	pointoforiginub04 string,
	race string,
	totchg string,
	visitlink string,
	zip string,
	ayear string,
	dxmccs1 string,
	prmccs1 string,
	readmitted string,
	dxccs_name string,
	prccs_name string,
	prmccs_name string,
	dxmccs_name string,
	transfer_in string,
	mdc_name string,
	totchg_bin string,
	los_bin string,
	chgperday string,
	age_bin string,
	age_bin2 string,
	payer1 string,
	gender string,
	hospzip string,
	readmitted_num string,
	myrownum string,
	ecol1 string,
	ecol2 string,
	ecol3 string,
	ecol4 string,
	ecol5 string,
	ecol6 string,
	ecol7 string,
	chronic_conditions string,
	ecol8 string,
	ecol9 string,
	ecol10 string,
	readmittance_conditions string
    FROM @HistoricalDataFile
    USING Extractors.Csv();

// select the most recent @dataSizeForVisualization rows from streamed data  
// add RowNumber columns to be in sync with ordered historical data so that we can eventually concatenate
@scoredStreamedData = 
    SELECT 
    ROW_NUMBER() OVER(ORDER BY dateAndTime ASC) AS RowNumber,
    *,    
    ROW_NUMBER() OVER(ORDER BY dateAndTime ASC) AS myRowCount
    FROM @InputData
    ORDER BY dateAndTime ASC
    FETCH @dataSizeForVisualization ROWS;   

// if we did not stream @dataSizeForVisualization rows yet, fill the balance using historic data 
// add row number info based on streamed records time to ease selection of most recent scored streamed data     
@numberedHistoricalData =
    SELECT 
    ROW_NUMBER() OVER(ORDER BY id ASC) AS RowNumber,
    DateTime.Parse("2010-05-02T13:00:19.4414536") AS dateAndTime,
    *,
    DateTime.Parse("2010-05-02T13:00:19.4414536") AS scoredStreamedSubsettingDate
    FROM @HistoricalData;

// name 'myRowCount' will appear as last column in next join query
@scoredStreamedDataInfo = SELECT COUNT(*)  AS myRowCount FROM @scoredStreamedData;

// now select historical data rows to fill up to @dataSizeForVisualization rows
@remainingData = 
    SELECT *
    FROM @numberedHistoricalData
    CROSS JOIN @scoredStreamedDataInfo AS crtscoredStreamedDataInfo
    WHERE @numberedHistoricalData.RowNumber <= (@dataSizeForVisualization-crtscoredStreamedDataInfo.myRowCount) ;

// put together scored streamed data we got so far, plus historic data, in a @dataSizeForVisualization rows long rowset
 @concatenatedData =    
     SELECT * FROM @scoredStreamedData
     UNION ALL         
     SELECT * FROM @remainingData;  
     
// final data has same schema as historical data (i.e. streamed scored data minus dateAndTime), so we remove all time and row info and virtual columns
// also add and save column names formatted according to PBI visualization schema.
@finalData = 
    SELECT 
	dshospid AS ["DSHOSPID"],
	id AS ["KEY"],
	age AS ["AGE"],
	amonth AS ["AMONTH"],
	atype AS ["ATYPE"],
	dispub04 AS ["DISPUB04"],
	drg AS ["DRG"],
	dx1 AS ["DX1"],
	dxccs1 AS ["DXCCS1"],
	hospst AS ["HOSPST"],
	homeless AS ["Homeless"],
	los AS ["LOS"],
	mdc AS ["MDC"],
	medincstq AS ["MEDINCSTQ"],
	pr1 AS ["PR1"],
	prccs1 AS ["PRCCS1"],
	pstate AS ["PSTATE"],
	pointoforiginub04 AS ["PointOfOriginUB04"],
	race AS ["RACE"],
	totchg AS ["TOTCHG"],
	visitlink AS ["VisitLink"],
	zip AS ["ZIP"],
	ayear AS ["AYEAR"],
	dxmccs1 AS ["DXMCCS1"],
	prmccs1 AS ["PRMCCS1"],
	readmitted AS ["Readmitted"],
	dxccs_name AS ["DXCCS_name"],
	prccs_name AS ["PRCCS_name"],
	prmccs_name AS ["PRMCCS_name"],
	dxmccs_name AS ["DXMCCS_name"],
	transfer_in AS ["TRANSFER_IN"],
	mdc_name AS ["MDC_name"],
	totchg_bin AS ["TOTCHG_bin"],
	los_bin AS ["LOS_bin"],
	chgperday AS ["CHGperday"],
	age_bin AS ["AGE_bin"],
	age_bin2 AS ["AGE_bin2"],
	payer1 AS ["PAYER1"],
	gender AS ["GENDER"],
	hospzip AS ["HOSPZIP"],
	readmitted_num AS ["Readmitted_num"],
	myrownum AS ["myrownum"],
	ecol1 AS ["ecol1"],
	ecol2 AS ["ecol2"],
	ecol3 AS ["ecol3"],
	ecol4 AS ["ecol4"],
	ecol5 AS ["ecol5"],
	ecol6 AS ["ecol6"],
	ecol7 AS ["ecol7"],
	chronic_conditions AS ["CHRONIC_conditions"],
	ecol8 AS ["ecol8"],
	ecol9 AS ["ecol9"],
	ecol10 AS ["ecol10"],
	readmittance_conditions AS ["Readmittance_conditions"]
    FROM @concatenatedData AS DummyTable;

// save final data
OUTPUT @finalData TO @outputFile USING Outputters.Csv(quoting : false, outputHeader : true);



